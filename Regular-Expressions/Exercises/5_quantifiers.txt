Exercises from the quantifiers section in Intro to Regular Expressions

Q1: Write a regex that matches any word that begins with b and ends with an e, 
and has any number of letters in between. You may limit your regex to lowercase letters.
Test with the following:
  To be or not to be
  Be a busy bee
  I brake for animals.
Four Matches

A1: /\bb[a-z]*e/


Q2: Write a regex that matches any line of text that ends with a ?.
Test with the following:
  What's up, doc?
  Say what? No way.
  ?
  Who? What? Where? When? How?
Three Matches

A2: /^.*\?$/


Q3: Write a regex that matches any line of text that ends with a ?. but does not
match a line that consists entirely of a single?. 
Test it with the previous exercise strings

A3: /^.+\?$/


Q4: Write a regex that matches any line of text that contains nothing but a URL. 
For this exercise, a URL begins with http:// or http://, and continues until it
detects a whitespace character or end of line. Test your regex with these strings:
  http://launchschool.com/
  https://mail.google.com/mail/u/0/#inbox
  htpps://example.com
  Go to http://launchschool.com/
  https://user.example.com/test.cgi?a=p&c=0&t=0&g=0 hello
       http://launchschool.com/
There should be two matches

A4: /^https?:\/\/\S+$/


Q5: Modify your regex from the previous exercise so the URL can have optional leading
or trailing whitespace, but is otherwise on a line by itself. To test your regex with
trailing whitespace, you must add some spaces to the end of some lines in your sample
text.
three matches.

A5: /^\s*https?:\/\/\S+\s*$/


Q6: Modify your regex from the previous exercise so the URL can appear anywhere
on each line, so long as it begins at a word boundary.
five matches.

A6: /\bhttps?:\/\/\S+/


Q7: Write a regex that matches any word that contains at least three
occurences of the letter i.
Test with the following:
  Mississippi
  ziti 0minimize7
  inviting illegal iridium
three matches

A7: /\b([a-z]*i){3,}[a-z]*\b/i


Q8: Write a regex that matches the last word in each line of text. For this exercise,
assume that words are any sequence of non-whitespace characters.
Test with the following:
  What's up, doc?
  I tawt I taw a putty tat!
  Thufferin' thuccotath!
  Oh my darling, Clementine!
  Camptown ladies sing this song, doo dah.
five matches

A8: /\b\S+$/


Q9: Write a regex that matches lines of text that contain at least 3, but no more
than 6, consecutive comma separated numbers. You may assume that every number on each
line is both preceded by and followed by a comma.
Test with the following
  ,123,456,789,123,345,
  ,123,456,,789,123,
  ,23,56,7,
  ,13,45,78,23,45,34,
  ,13,45,78,23,45,34,56,
three matches

A9: /^,(\d+,){3,6}$/


Q10: Write a regex that matches lines of text that contain at least 3, but no more
than 6, consecutive comma separated numbers. In this exercise, you can assume that 
the first number on each line is NOT preceded by a comma, and the last number is NOT
followed by a comma.
Test with the following:
  123,456,789,123,345
  123,456,,789,123
  23,56,7
  13,45,78,23,45,34
  13,45,78,23,45,34,56
three matches

A10: /^(\d+,?){3,6}$/



Q11: Write a regex that matches lines of text that contain either 3 comma separated
numbers or 6 or more comma separated numbers. 
Test with the following:
  123,456,789,123,345
  123,456,,789,123
  23,56,7
  13,45,78,23,45,34
  13,45,78,23,45,34,56
three matches

A11: /^(((\d+,){5,})|(\d+,){2})\d+$/


Q12: Write a regex that matches HTML h1 header tags
  <h1>Main Heading</h1>
  <h1>Another Main Heading</h1>
  <h1>ABC</h1> <p>Paragraph</p> <h1>DEF</h1><p>Done</p>
and the content between the opening and closing tags. If multiple header tags appear
on one line, your regex should match the opening and closing tags and the text
content of the headers, but nothing else. You may assume that there are no nested
tags in the text between <h1> and </h1>

A12: /<h1>.*?<\/h1>/ -> got it wrong, needed to use a "lazy quantitifier"
